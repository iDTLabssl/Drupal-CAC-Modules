<?php

/**
 * @file
 *   Hook implementations and general functions.
 *   Integrates payments into webforms
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\payment\Entity\PaymentInterface;
use Drupal\payment_reference\PaymentReference;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Flag to indicate that a payment setting can be set.
 */
define('PAYMENT_WEBFORM_NEUTRAL', -1);

/**
 * Flag to indicate that a payment setting is disabled for all webforms.
 */
define('PAYMENT_WEBFORM_DISABLED_ALL', 0);

/**
 * Flag to indicate that a payment setting is enabled for all webforms.
 */
define('PAYMENT_WEBFORM_ENABLED_ALL', 1);

/**
 * Flag to indicate that a payment setting is disabled for all webforms.
 */
define('PAYMENT_WEBFORM_DISABLED_WEBFORM', 2);

/**
 * Flag to indicate that a payment setting is enabled for all webforms.
 */
define('PAYMENT_WEBFORM_ENABLED_WEBFORM', 3);

/**
 * Alter webform third party settings webforms to include Payment configuration.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param bool $payment
 *   TRUE if payment protection is enabled.
 * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $label
 *   The label to displayed within the checkbox titles.
 */
function _payment_webform_form(array &$form, FormStateInterface $form_state, $payment, $label) {
    $t_args = [
        '%label' => $label,
        ':href_webform' => Url::fromRoute('webform.settings')->toString(),
    ];

    // Payment.
    $form['third_party_settings']['payment_webform'] = [
        '#type' => 'details',
        '#title' => t('Payment Integration'),
        '#open' => TRUE,
        '#description' => t('Accept Payments during submissions of this webform.', $t_args),
    ];
    $form['third_party_settings']['payment_webform']['payment'] = [
        '#type' => 'checkbox',
        '#title' => t('Accept payments for %label', $t_args),
        '#default_value' => $payment,
    ];
}



/**
 * Implements hook_form_FORM_ID_alter().
 */
function payment_webform_form_webform_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
    /** @var \Drupal\webform\WebformInterface $webform */
    $webform = $form_state->getFormObject()->getEntity();
    $payment = $webform->getThirdPartySetting('payment_webform', 'payment');

    _payment_webform_form(
        $form,
        $form_state,
        $payment,
        t('@label webform', ['@label' => $webform->label()])
    );
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function payment_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // Only add a Payment when a webform is initially load.
    // After a webform is submitted, via a multistep webform and/or saving a draft,
    // we can skip adding a Payment.
    if ($form_state->isSubmitted()) {
        return;
    }

    /** @var \Drupal\webform\WebformThirdPartySettingsManagerInterface $third_party_settings_manager */
    $third_party_settings_manager = \Drupal::service('webform.third_party_settings_manager');

    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webform_submission = $form_state->getFormObject()->getEntity();
    $webform = $webform_submission->getWebform();

    $payment = $webform->getThirdPartySetting('payment_webform', 'payment');
    if ($payment) {
        _payment_webform_add_form_protection($form, $form_state);
    }
}



/**
 * Form builder function to add payment to webform.
 *
 * @param array $options
 *   Array of options to be added to form. Currently accepts 'payment_webform' and
 *   'time_restriction'.
 */
function _payment_webform_add_form_protection(&$form, FormStateInterface $form_state) {
    $account = \Drupal::currentUser();

    // Don't add any protections if the user can bypass the Honeypot.
//    if ($account->hasPermission('bypass payment webform payment')) {
//        return;
//    }

    // Get the element name (default is generic 'url').
    $payment_webform_element = "url";

    // Build the payment_webform element.
    $payment_webform_class = $payment_webform_element . '-textfield';
    $form[$payment_webform_element] = [
        '#type' => 'textfield',
        '#title' => t('Leave this field blank'),
        '#size' => 20,
        '#weight' => 100,
        '#attributes' => ['autocomplete' => 'off'],
        '#element_validate' => ['_payment_webform_payment_webform_validate'],
        '#prefix' => '<div class="' . $payment_webform_class . '">',
        '#suffix' => '</div>',
    ];

    // Hide payment_webform via dynamically-generated CSS.
//    $form[$payment_webform_element]['#attached']['html_head'][] = [
//        [
//            '#tag' => 'style',
//            '#value' => '.' . $payment_webform_class . ' { display: none !important; }',
//        ],
//        'payment_webform_css',
//    ];
}

/**
 * Validate payment_webform field.
 */
function _payment_webform_payment_webform_validate($element, FormStateInterface $form_state) {
    // Get the payment_webform field value.
    $payment_webform_value = $element['#value'];

    // Make sure it's empty.
    if (!empty($payment_webform_value)) {
        _payment_webform_log($form_state->getValue('form_id'), 'payment_webform');
        $form_state->setErrorByName('', t('There was a problem with your form submission. Please refresh the page and try again.'));
    }
}

/**
 * Validate payment_webform's time restriction field.
 */
function _payment_webform_time_restriction_validate($element, FormStateInterface $form_state) {
    if ($form_state->isProgrammed()) {
        // Don't do anything if the form was submitted programmatically.
        return;
    }

    $triggering_element = $form_state->getTriggeringElement();
    // Don't do anything if the triggering element is a preview button.
    if ($triggering_element['#value'] == t('Preview')) {
        return;
    }

    // Get the time value.
    $payment_webform_time = payment_webform_get_time_from_signed_timestamp($form_state->getValue('payment_webform_time'));

    // Get the payment_webform_time_limit.
    $time_limit = payment_webform_get_time_limit($form_state->getValues());

    // Make sure current time - (time_limit + form time value) is greater than 0.
    // If not, throw an error.
    if (!$payment_webform_time || REQUEST_TIME < ($payment_webform_time + $time_limit)) {
        _payment_webform_log($form_state->getValue('form_id'), 'payment_webform_time');
        $time_limit = payment_webform_get_time_limit();
        $form_state->setValue('payment_webform_time', payment_webform_get_signed_timestamp(REQUEST_TIME));
        $form_state->setErrorByName('', t('There was a problem with your form submission. Please wait @limit seconds and try again.', ['@limit' => $time_limit]));
    }
}

/**
 * Log blocked form submissions.
 *
 * @param string $form_id
 *   Form ID for the form on which submission was blocked.
 * @param string $type
 *   String indicating the reason the submission was blocked. Allowed values:
 *     - payment_webform: If payment_webform field was filled in.
 *     - payment_webform_time: If form was completed before the configured time limit.
 */
function _payment_webform_log($form_id, $type) {
    payment_webform_log_failure($form_id, $type);
    if (\Drupal::config('payment_webform.settings')->get('log')) {
        $variables = [
            '%form'  => $form_id,
            '@cause' => ($type == 'payment_webform') ? t('submission of a value in the payment_webform field') : t('submission of the form in less than minimum required time'),
        ];
        \Drupal::logger('payment_webform')->notice(t('Blocked submission of %form due to @cause.', $variables));
    }
}



///**
// * Implements hook_entity_extra_field_info().
// */
//function payment_reference_entity_extra_field_info() {
//  return \Drupal::service('payment_reference.hook.entity_extra_field_info')->invoke();
//}
//
///**
// * Implements hook_ENTITY_TYPE_delete().
// */
//function payment_reference_field_storage_config_delete(FieldStorageConfigInterface $field_storage_config) {
//  if ($field_storage_config->getType() == 'payment_reference') {
//    PaymentReference::queue()->deleteByCategoryIdPrefix($field_storage_config->id());
//  }
//}
//
///**
// * Implements hook_ENTITY_TYPE_delete().
// */
//function payment_reference_field_config_delete(FieldConfigInterface $field_config) {
//  PaymentReference::queue()->deleteByCategoryId($field_config->id());
//}
//
///**
// * Implements hook_ENTITY_TYPE_insert().
// */
//function payment_reference_payment_insert(PaymentInterface $payment) {
//  if ($payment->bundle() == 'payment_reference') {
//    /** @var \Drupal\payment_reference\Plugin\Payment\Type\PaymentReference $payment_type */
//    $payment_type = $payment->getPaymentType();
//    PaymentReference::queue()->save($payment_type->getEntityTypeId() . '.' . $payment_type->getBundle() . '.' . $payment_type->getFieldName(), $payment->id());
//  }
//}
//
///**
// * Implements hook_ENTITY_TYPE_delete().
// */
//function payment_reference_payment_delete(PaymentInterface $payment) {
//  PaymentReference::queue()->deleteByPaymentId($payment->id());
//}
//
///**
// * Implements hook_entity_field_access().
// */
//function payment_reference_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
//  if ($field_definition->getType() == 'payment_reference' && !$account->isAuthenticated()) {
//    return AccessResult::forbidden()->addCacheContexts(['user.roles:anonymous']);
//  }
//
//  // No opinion.
//  return AccessResult::neutral();
//}
